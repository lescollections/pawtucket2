#
cache_timeout = 0
#

# limit facets on menubar browse 
menubarFacetGroup = front


browseTypes = {
	objects = {
		displayName = _(Books),
		labelSingular = _("book"),
 		labelPlural = _("books"),
		table = ca_objects,
		
		restrictToTypes = [bib],
		dontExpandTypesHierarchically = 1,
		
		includeSubtypes = 0,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {},
		},
		sortBy = {
			Title = ca_object_labels.name,
			Author = ca_entity_labels.name/author,
			Year = ca_objects.publication_date,

		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,		
			Identifier = asc,

		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},		
	entities = {
		displayName = _(People & Organizations),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename,		
			Occupation = ca_entities.industry_occupations,
			Lifedates = ca_entities.life_dates,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	borrowing = {
		displayName = _(Borrowing history),
		labelSingular = _("borrowing"),
 		labelPlural = _("borrowings"),
		table = ca_objects_x_entities,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			borrowing_list = {}
		},
		
		dontIncludeInBrowseMenu = 1,
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename,		
			Occupation = ca_entities.industry_occupations,
			Lifedates = ca_entities.life_dates,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	docs = {
		displayName = _(Documents),
		labelSingular = _("document"),
 		labelPlural = _("documents"),
		table = ca_objects,
		
		restrictToTypes = [document, catalog, ledger],
		availableFacets = [document_type, local_subject, LC_subject, date_facet, type_facet],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.creation_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},		
}
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			facet_groups = [front],
			restrict_to_types = [catalog, document],

			label_singular = _("genre"),
			label_plural = _("genres"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		document_type = {
			type = attribute,
			element_code = document_type,
			
			group_mode = alphabetical,
			
			label_singular = _("Genre"),
			label_plural = _("Genres")
		},
		local_subject = {
			type = attribute,
			element_code = local_subject,
			
			group_mode = alphabetical,
			facet_groups = [front],
			restrict_to_types = [catalog, document],
			
			label_singular = _("Local Subject"),
			label_plural = _("Local Subjects")
		},			
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [author],
			
			facet_groups = [front],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("author"),
			label_plural = _("authors"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		gender_facet = {
			type = attribute,
			element_code = gender,
			
			relative_to = ca_entities,
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("gender"),
			label_plural = _("genders")
		},
		publication_facet = {
			type = normalizedDates,
			element_code = publication_date,
			normalization = centuries,
			
			group_mode = none,
			
			facet_groups = [front],
			
			label_singular = _("publication date"),
			label_plural = _("publication dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		pubplace_facet = {
			type = attribute,
			element_code = publication_place_text,
			
			group_mode = none,
			
			facet_groups = [front],
			
			label_singular = _("publication place"),
			label_plural = _("publication places"),
			description = _("Find objects by place of publication."),			
		},
		1813_subject = {
			type = attribute,
			element_code = subjects_1813,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			facet_groups = [front],
			
			label_singular = _("1813 subject"),
			label_plural = _("1813 subjects")
		},
		1838_subject = {
			type = attribute,
			element_code = subjects_1838,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			facet_groups = [front],
			
			label_singular = _("1838 subject"),
			label_plural = _("1838 subjects")
		},
		1850_subject = {
			type = attribute,
			element_code = Analytical_Catalog_1850,
			
			group_mode = hierarchical,
			show_hierarchy = 1,
			facet_groups = [front],
			
			label_singular = _("1850 subject"),
			label_plural = _("1850 subjects")
		},
		LC_subject = {
			type = attribute,
			element_code = LCSH,
			
			group_mode = alphabetical,
			show_hierarchy = 1,
			facet_groups = [front],
			
			label_singular = _("Current subject"),
			label_plural = _("Current subjects")
		},								
		occupation_facet = {
			type = attribute,
			element_code = industry_occupations,
			
			relative_to = ca_entities,
			group_mode = hierarchical,
			show_hierarchy = 1,
			facet_groups = [front],
			
			label_singular = _("reader occupation"),
			label_plural = _("reader occupations")
		},	
		publication_place_facet = {
			type = attribute,
			element_code = publication_place_text,
			
			group_mode = alphabetical,
			
			label_singular = _("publication place"),
			label_plural = _("publication places")
		},
		date_facet = {
			type = normalizedDates,
			element_code = dates_value,
			normalization = decades,
			
			facet_groups = [front],
			
			group_mode = none,
			
			label_singular = _("Date"),
			label_plural = _("Dates"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},																		
															
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
		gender_facet = {
			type = attribute,
			element_code = gender,
			
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("gender"),
			label_plural = _("genders")
		},
		occupation_facet = {
			type = attribute,
			element_code = industry_occupations,
			
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("occupation"),
			label_plural = _("occupations")
		},
		lifedates_facet = {
			type = normalizedDates,
			element_code = life_dates,
			normalization = decades,		
			
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("Lifespan"),
			label_plural = _("Lifepan")
		},					
		country_facet = {
			type = attribute,
			element_code = country_origin,
			
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("country"),
			label_plural = _("countries")
		},
		relationship_facet = {
			type = attribute,
			element_code = relationship_to_library,
			
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("Relationship to Library"),
			label_plural = _("Relationship to Library")
		},			
		1813_subject = {
			type = attribute,
			element_code = subjects_1813,
			
			relative_to = ca_objects,
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("1813 subject"),
			label_plural = _("1813 subjects")
		},
		1838_subject = {
			type = attribute,
			element_code = subjects_1838,
			
			relative_to = ca_objects,
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("1838 subject"),
			label_plural = _("1838 subjects")
		},
		1850_subject = {
			type = attribute,
			element_code = Analytical_Catalog_1850,
			
			relative_to = ca_objects,
			group_mode = alphabetical,
			facet_groups = [front],
			
			label_singular = _("1850 subject"),
			label_plural = _("1850 subjects")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("type"),
			label_plural = _("types")
		},								
	}
}
views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =